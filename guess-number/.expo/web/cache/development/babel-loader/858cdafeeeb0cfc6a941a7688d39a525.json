{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/rguliani/Documents/learning/react-native/react-native-tutorials/guess-number/screens/GameScreen.js\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Card from \"../components/shared/Card\";\nimport NumberContainer from \"../components/shared/NumberContainer\";\nimport Colors from \"../constants/color\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomBetween(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  useEffect(function () {\n    console.log(currentGuess, props.userChoice);\n\n    if (currentGuess == props.userChoice) {\n      console.log(\"game over !!!\");\n      props.onGameOver(rounds);\n    }\n  }, []);\n\n  var guessNext = function guessNext(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie !!\", \"You know that is wrong...\", [{\n        text: \"sorry\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") currentHigh.current = currentGuess;else currentLow.current = currentGuess;\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setRounds(function (currentValue) {\n      return currentValue + 1;\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Opponent's Guess \", props.userChoice), React.createElement(NumberContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: function onPress() {\n      return guessNext(\"lower\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: function onPress() {\n      return guessNext(\"greater\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/rguliani/Documents/learning/react-native/react-native-tutorials/guess-number/screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Card","NumberContainer","Colors","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","rounds","setRounds","currentLow","currentHigh","console","log","onGameOver","guessNext","direction","Alert","alert","text","style","current","nextNumber","currentValue","styles","screen","buttonContainer","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n  Button,\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Alert,\n  Keyboard,\n} from \"react-native\";\nimport Card from \"../components/shared/Card\";\nimport NumberContainer from \"../components/shared/NumberContainer\";\n\nimport Colors from \"../constants/color\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst GameScreen = (props) => {\n  const [currentGuess, setCurrentGuess] = useState(\n    generateRandomBetween(1, 100, props.userChoice)\n  );\n  const [rounds, setRounds] = useState(0);\n\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  useEffect(() => {\n    console.log(currentGuess, props.userChoice);\n    if (currentGuess == props.userChoice) {\n      console.log(\"game over !!!\");\n      props.onGameOver(rounds);\n    }\n  }, []);\n\n  const guessNext = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie !!\", \"You know that is wrong...\", [\n        { text: \"sorry\", style: \"cancel\" },\n      ]);\n      return;\n    }\n\n    if (direction === \"lower\") currentHigh.current = currentGuess;\n    else currentLow.current = currentGuess;\n\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    setRounds((currentValue) => currentValue + 1);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text>Opponent's Guess {props.userChoice}</Text>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <Button title=\"LOWER\" onPress={() => guessNext(\"lower\")} />\n        <Button title=\"GREATER\" onPress={() => guessNext(\"greater\")} />\n      </Card>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}