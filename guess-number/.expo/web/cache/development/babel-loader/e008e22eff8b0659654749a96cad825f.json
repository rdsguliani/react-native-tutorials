{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/rguliani/Documents/learning/react-native/react-native-tutorials/guess-number/screens/StartScreen.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Card from \"./../components/shared/Card\";\nimport Input from \"./../components/shared/Input\";\nimport Colors from \"./../constants/color\";\n\nvar StartScreen = function StartScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue(\"\");\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredValue);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid number!\", \"Number has to be a number between 1 and 99.\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Start a New Game!\"), React.createElement(Card, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Select a Number\"), React.createElement(Input, {\n    style: styles.input,\n    blurOnSubmit: true,\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    keyboardType: \"number-pad\",\n    maxLength: 2,\n    onChangeText: numberInputHandler,\n    value: enteredValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    title: \"Reset\",\n    color: Colors.accent,\n    onPress: resetInputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    title: \"Confirm\",\n    color: Colors.primary,\n    onPress: confirmInputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  })))));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    marginVertical: 10\n  },\n  input: {\n    width: 20,\n    borderBottomWidth: 1\n  },\n  inputContainer: {\n    width: 300,\n    maxWidth: \"80%\",\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    width: \"60%\",\n    flexDirection: \"row\",\n    marginTop: 10,\n    justifyContent: \"space-around\"\n  }\n});\nexport default StartScreen;","map":{"version":3,"sources":["/Users/rguliani/Documents/learning/react-native/react-native-tutorials/guess-number/screens/StartScreen.js"],"names":["React","useState","Card","Input","Colors","StartScreen","props","enteredValue","setEnteredValue","numberInputHandler","inputText","replace","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","screen","title","inputContainer","input","buttonContainer","accent","primary","StyleSheet","create","flex","padding","alignItems","fontSize","marginVertical","width","borderBottomWidth","maxWidth","flexDirection","marginTop","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, StyleSheet, Text, View, TextInput, Alert } from \"react-native\";\n\nimport Card from \"./../components/shared/Card\";\nimport Input from \"./../components/shared/Input\";\n\nimport Colors from \"./../constants/color\";\n\nconst StartScreen = (props) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n\n  const numberInputHandler = (inputText) => {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  const resetInputHandler = () => {\n    setEnteredValue(\"\");\n  };\n\n  const confirmInputHandler = () => {\n    const chosenNumber = parseInt(enteredValue);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\n        \"Invalid number!\",\n        \"Number has to be a number between 1 and 99.\",\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\n      );\n      return;\n    }\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={styles.title}>Start a New Game!</Text>\n\n      <Card style={styles.inputContainer}>\n        <Text>Select a Number</Text>\n        <Input\n          style={styles.input}\n          blurOnSubmit\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          keyboardType=\"number-pad\"\n          maxLength={2}\n          onChangeText={numberInputHandler}\n          value={enteredValue}\n        />\n        <View style={styles.buttonContainer}>\n          <View>\n            <Button\n              title=\"Reset\"\n              color={Colors.accent}\n              onPress={resetInputHandler}\n            />\n          </View>\n          <View>\n            <Button\n              title=\"Confirm\"\n              color={Colors.primary}\n              onPress={confirmInputHandler}\n            />\n          </View>\n        </View>\n      </Card>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    width: 20,\n    borderBottomWidth: 1,\n  },\n  inputContainer: {\n    width: 300,\n    maxWidth: \"80%\",\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    width: \"60%\",\n    flexDirection: \"row\",\n    marginTop: 10,\n    justifyContent: \"space-around\",\n  },\n});\n\nexport default StartScreen;\n"]},"metadata":{},"sourceType":"module"}